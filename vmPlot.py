import sysimport osimport getpassimport numpy as npimport pandas as pdimport matplotlib.pyplot as pltdef config():    """    to go to the pg and file directory (spyder use)    """    paths = {}    osname = sys.platform    username = getpass.getuser()    if osname == 'Windows'and username == 'Benoit':        os.chdir(r'D:\\travail\sourcecode\developing\paper\centriG')    elif osname == 'Linux' and username == 'benoit':        os.chdir(r'/media/benoit/data/travail/sourcecode/developing/paper/centriG')    elif osname == 'Windows'and username == 'marc':        os.chdir(r'H:/pg/centriG')    elif osname == 'darwin' and username == 'cdesbois':        os.chdir(r'/Users/cdesbois/pg/chrisPg/centriG')        paths['cgFig'] = os.path.expanduser('~/ownCloud/cgFigures')        paths['save'] = '/Users/cdesbois/ownCloud/cgFigures'    return pathspaths = config()#%% to be checked:sig_cells = ['1427A_CXG4',             '1429D_CXG8',             '1509E_CXG4',             '1512F_CXG6',             '1516F_CXG2',             '1516G_CXG2',             '1516M_CXG2',             '1527B_CXG2',             '1622H_CXG3',             '1638D_CXG5']#%%paths['traces'] = '/Users/cdesbois/ownCloud/cgFigures/averageTraces'info_df = pd.read_excel(os.path.join(paths['traces'], 'neuron_props.xlsx'))def load_all_vm_traces(info_df):    stims = [item for item in os.listdir(os.path.join(paths['traces'], 'vm'))             if item[0] != '.']    conds = {}    for name in stims:        filename = os.path.join(paths['traces'], 'vm', name)        df = pd.read_csv(filename, sep='\t', header=None)        df.columns = info_df.Neuron.to_list()        #center and scale        df.index -= df.index.max()/2        df.index /= 10        conds[name] = df.copy()    return condsvm_dico = load_all_vm_traces(info_df)#%%plt.close('all')cond = 'cpisosec.txt'data_cond = vm_dico[cond][sig_cells]ref = 'ctronly.txt' data_ref = vm_dico[ref][sig_cells]fig = plt.figure()ax = fig.add_subplot(411)for col in data_cond.columns:    ax.plot(data_cond[col], 'r-', alpha=0.6)#, label=col.split('_')[0])    ax.plot(data_ref[col], 'k-', alpha=0.6)ax = fig.add_subplot(412)ax.plot(data_cond.mean(axis=1), 'r-', alpha=0.6, label=cond)ax.plot(data_ref.mean(axis=1), 'k-', alpha=0.6, label=ref)axT = ax.twinx()axT.plot(np.cumsum(data_cond.mean(axis=1)), 'r-', alpha=0.6, label='cumsum')axT.plot(np.cumsum(data_ref.mean(axis=1)), 'k-', alpha=0.6, label='cumsum')# axT.legend()# ax.legend()ax = fig.add_subplot(413)diff = data_cond.mean(axis=1) - data_ref.mean(axis=1)ax.plot(diff, '-g',         linewidth=2, alpha=0.8, label = 'diff')x = diff.index.valuesax.fill_between(x=x, y1=diff,color='g', alpha=0.3)# ax.legend()ax = fig.add_subplot(414)ax.plot(np.cumsum(diff), label='cumsum')ax.plot(np.cumsum(diff -diff.mean()), label='-mean & cumsum')# ax.legend()for i, ax in enumerate(fig.get_axes()):    for loca in ['top', 'right']:        ax.spines[loca].set_visible(False)    lims = ax.get_xlim()    ax.hlines(0, lims[0], lims[1], alpha=0.3)    lims = ax.get_ylim()    ax.vlines(0, lims[0], lims[1], alpha=0.3)    if i <4:        ax.xaxis.set_visible(False)        ax.spines['bottom'].set_visible(False)fig.legend()        #%%